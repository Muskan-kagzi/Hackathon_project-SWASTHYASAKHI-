<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Anonymous Chat with Q&A</title>
  <style>
    * {
      box-sizing: border-box;
    }
    
    body {
      display: flex;
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      height: 100vh;
      overflow: hidden;
    }
    
    /* Sidebar */
    #sidebar {
      width: 300px;
      background: linear-gradient(180deg, #8b5fbf 0%, #6a4c8f 100%);
      padding: 20px;
      border-right: 3px solid rgba(255, 255, 255, 0.1);
      height: 100vh;
      box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
      overflow-y: auto;
    }
    
    #sidebar h3 {
      margin-top: 0;
      color: white;
      font-size: 22px;
      font-weight: 600;
      text-align: center;
      margin-bottom: 20px;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }
    
    .room-btn {
      display: block;
      width: 100%;
      margin: 10px 0;
      padding: 12px 16px;
      border: none;
      background: linear-gradient(135deg, #9c6bdb 0%, #7c4dff 100%);
      color: white;
      border-radius: 20px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(124, 77, 255, 0.3);
      position: relative;
      overflow: hidden;
      text-align: left;
    }
    
    .room-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }
    
    .room-btn:hover::before {
      left: 100%;
    }
    
    .room-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(124, 77, 255, 0.4);
    }
    
    .room-btn.active {
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
      box-shadow: 0 6px 20px rgba(238, 90, 82, 0.4);
    }
    
    #onlineCount {
      margin-top: 20px;
      padding: 15px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 15px;
      color: white;
      text-align: center;
      font-size: 16px;
      font-weight: 500;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    
    /* Main chat area */
    #main {
      flex: 1;
      display: flex;
      flex-direction: column;
      height: 100vh;
      background: white;
      border-radius: 20px 0 0 0;
      overflow: hidden;
      box-shadow: -5px 0 20px rgba(0, 0, 0, 0.1);
    }
    
    #chat {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
      background: linear-gradient(to bottom, #f8f9ff, #ffffff);
      max-height: 60vh;
    }
    
    #messages {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    #messages .message-wrapper {
      display: flex;
      margin-bottom: 8px;
    }
    
    #messages .message-wrapper.self {
      justify-content: flex-end;
    }
    
    #messages .message-wrapper.other {
      justify-content: flex-start;
    }
    
    #messages .message-wrapper.system {
      justify-content: center;
    }
    
    #messages p {
      margin: 0;
      padding: 12px 18px;
      border-radius: 20px;
      max-width: 70%;
      word-wrap: break-word;
      font-size: 15px;
      line-height: 1.4;
      position: relative;
      animation: messageSlide 0.3s ease-out;
    }
    
    @keyframes messageSlide {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    .system p {
      background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
      color: #1565c0;
      font-style: italic;
      text-align: center;
      max-width: 60%;
      font-size: 13px;
      border: 1px solid rgba(21, 101, 192, 0.2);
    }
    
    .self p {
      background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%);
      color: white;
      border-radius: 20px 20px 5px 20px;
      box-shadow: 0 3px 10px rgba(124, 77, 255, 0.3);
    }
    
    .other p {
      background: linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%);
      color: #333;
      border-radius: 20px 20px 20px 5px;
      border: 1px solid rgba(124, 77, 255, 0.2);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    /* Chat input form */
    #form {
      display: flex;
      padding: 20px;
      background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%);
      border-top: 3px solid rgba(255, 255, 255, 0.1);
    }
    
    #input {
      flex: 1;
      padding: 15px 20px;
      border: none;
      border-radius: 25px;
      font-size: 16px;
      margin-right: 15px;
      background: white;
      box-shadow: 0 3px 15px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }
    
    #input:focus {
      outline: none;
      box-shadow: 0 5px 20px rgba(124, 77, 255, 0.3);
      transform: translateY(-1px);
    }
    
    #form button {
      padding: 15px 30px;
      border: none;
      background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
      color: white;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(238, 90, 82, 0.3);
    }
    
    #form button:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(238, 90, 82, 0.4);
    }
    
    #form button:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    /* Q&A Section */
    #qa {
      padding: 20px;
      background: linear-gradient(135deg, #f8f9ff 0%, #e8eaf6 100%);
      height: 40vh;
      overflow-y: auto;
      border-top: 3px solid rgba(124, 77, 255, 0.2);
    }
    
    #qa h3 {
      margin-top: 0;
      color: #7c4dff;
      font-size: 18px;
      font-weight: 600;
      margin-bottom: 15px;
      text-align: center;
    }
    
    .qa-controls {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .qa-input-section {
      display: flex;
      flex: 1;
      gap: 10px;
    }
    
    #questionInput {
      flex: 1;
      padding: 10px 15px;
      border: 2px solid rgba(124, 77, 255, 0.2);
      border-radius: 20px;
      font-size: 14px;
      transition: all 0.3s ease;
      background: white;
    }
    
    #questionInput:focus {
      outline: none;
      border-color: #7c4dff;
      box-shadow: 0 3px 15px rgba(124, 77, 255, 0.2);
    }
    
    #askBtn {
      padding: 10px 20px;
      background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%);
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 3px 10px rgba(124, 77, 255, 0.3);
      font-size: 14px;
    }
    
    #askBtn:hover {
      transform: translateY(-1px);
      box-shadow: 0 5px 15px rgba(124, 77, 255, 0.4);
    }
    
    #qaPageBtn {
      padding: 10px 20px;
      background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);
      color: white;
      border: none;
      border-radius: 20px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 3px 10px rgba(255, 152, 0, 0.3);
      font-size: 14px;
      white-space: nowrap;
    }
    
    #qaPageBtn:hover {
      transform: translateY(-1px);
      box-shadow: 0 5px 15px rgba(255, 152, 0, 0.4);
    }
    
    #askBtn:disabled, #qaPageBtn:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }
    
    /* Search functionality */
    #searchInput {
      width: 100%;
      padding: 10px 15px;
      border: 2px solid rgba(124, 77, 255, 0.2);
      border-radius: 15px;
      font-size: 14px;
      margin-bottom: 15px;
      background: white;
    }
    
    #searchInput:focus {
      outline: none;
      border-color: #7c4dff;
    }
    
    #questions {
      list-style: none;
      padding: 0;
    }
    
    #questions li {
      margin-bottom: 15px;
      padding: 15px;
      background: white;
      border-radius: 12px;
      border: 2px solid rgba(124, 77, 255, 0.1);
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
      transition: all 0.3s ease;
    }
    
    #questions li:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(124, 77, 255, 0.1);
    }
    
    .question-text {
      font-weight: 600;
      margin-bottom: 12px;
      color: #333;
      font-size: 14px;
      padding: 8px 12px;
      background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
      border-radius: 8px;
    }
    
    .answer-section {
      display: flex;
      gap: 8px;
      margin-bottom: 12px;
    }
    
    .answer-input {
      flex: 1;
      padding: 8px 12px;
      border: 1px solid rgba(124, 77, 255, 0.3);
      border-radius: 12px;
      font-size: 13px;
    }
    
    .answer-input:focus {
      outline: none;
      border-color: #7c4dff;
    }
    
    .answer-btn {
      padding: 8px 15px;
      background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
      color: white;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-size: 13px;
      font-weight: 500;
      transition: all 0.3s ease;
    }
    
    .answer-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 3px 10px rgba(76, 175, 80, 0.3);
    }
    
    .answers-list {
      margin-top: 10px;
      padding: 0;
      list-style: none;
    }
    
    .answers-list li {
      background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
      margin-bottom: 6px;
      padding: 8px 12px;
      border-radius: 8px;
      font-size: 13px;
      border: 1px solid rgba(76, 175, 80, 0.2);
      animation: answerSlide 0.3s ease-out;
    }
    
    @keyframes answerSlide {
      from {
        opacity: 0;
        transform: translateX(-10px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
    
    .room-status {
      text-align: center;
      padding: 40px 20px;
      color: #7c4dff;
      font-style: italic;
      font-size: 18px;
      background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
      border-radius: 20px;
      margin: 20px;
      border: 2px dashed rgba(124, 77, 255, 0.3);
    }
    
    /* Q&A Page Modal */
    .qa-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      z-index: 1000;
      backdrop-filter: blur(5px);
    }
    
    .qa-modal-content {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 90%;
      max-width: 800px;
      height: 80%;
      background: white;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }
    
    .qa-modal-header {
      background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%);
      padding: 20px;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .qa-modal-header h2 {
      margin: 0;
      font-size: 24px;
    }
    
    .close-modal {
      background: none;
      border: none;
      color: white;
      font-size: 28px;
      cursor: pointer;
      padding: 0;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      transition: all 0.3s ease;
    }
    
    .close-modal:hover {
      background: rgba(255, 255, 255, 0.2);
    }
    
    .qa-modal-body {
      padding: 20px;
      height: calc(100% - 80px);
      overflow-y: auto;
      background: linear-gradient(135deg, #f8f9ff 0%, #ffffff 100%);
    }
    
    /* Custom scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
    }
    
    ::-webkit-scrollbar-track {
      background: rgba(124, 77, 255, 0.1);
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%);
      border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, #651fff 0%, #7c4dff 100%);
    }
    
    .no-questions {
      text-align: center;
      color: #999;
      font-style: italic;
      padding: 20px;
    }
  </style>
</head>
<body>
  <div id="sidebar">
    <h3>💬 Chat Rooms</h3>
    <button class="room-btn" onclick="joinRoom('pregnancy')">🤱 Pregnancy Support</button>
    <button class="room-btn" onclick="joinRoom('periods')">🌸 Menstrual Health</button>
    <button class="room-btn" onclick="joinRoom('breast-health')">🎀 Breast Health</button>
    <button class="room-btn" onclick="joinRoom('postpartum')">👶 Postpartum Care</button>
    <button class="room-btn" onclick="joinRoom('general')">💭 General Health</button>
    <div id="onlineCount">👥 Online: 0</div>
  </div>

  <div id="main">
    <div id="chat">
      <div id="messages">
        <div class="room-status">✨ Select a room to start chatting ✨</div>
      </div>
    </div>

    <form id="form">
      <input id="input" autocomplete="off" placeholder="Type your message..." disabled />
      <button type="submit" disabled>Send 💜</button>
    </form>

    <div id="qa">
      <h3>❓ Quick Questions</h3>
      <div class="qa-controls">
        <div class="qa-input-section">
          <input id="questionInput" placeholder="Ask a quick question..." disabled />
          <button onclick="askQuestion()" disabled id="askBtn">Ask 🚀</button>
        </div>
        <button onclick="openQAPage()" disabled id="qaPageBtn">Full Q&A 📋</button>
      </div>
      
      <input id="searchInput" placeholder="🔍 Search questions..." disabled style="display: none;" />
      <ul id="questions"></ul>
    </div>
  </div>

  <!-- Q&A Modal -->
  <div id="qaModal" class="qa-modal">
    <div class="qa-modal-content">
      <div class="qa-modal-header">
        <h2>❓ Questions & Answers</h2>
        <button class="close-modal" onclick="closeQAPage()">&times;</button>
      </div>
      <div class="qa-modal-body">
        <div class="qa-input-section" style="margin-bottom: 20px;">
          <input id="modalQuestionInput" placeholder="Ask a detailed question..." style="flex: 1; padding: 12px 18px; border: 2px solid rgba(124, 77, 255, 0.2); border-radius: 20px; font-size: 15px; margin-right: 10px;" />
          <button onclick="askModalQuestion()" id="modalAskBtn" style="padding: 12px 25px; background: linear-gradient(135deg, #7c4dff 0%, #651fff 100%); color: white; border: none; border-radius: 20px; cursor: pointer; font-weight: 600;">Ask Question 🚀</button>
        </div>
        
        <input id="modalSearchInput" placeholder="🔍 Search through all questions..." style="width: 100%; padding: 12px 18px; border: 2px solid rgba(124, 77, 255, 0.2); border-radius: 15px; font-size: 15px; margin-bottom: 20px;" />
        
        <div id="modalQuestions">
          <div class="no-questions">No questions yet. Be the first to ask!</div>
        </div>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    let currentRoom = null;
    let allQuestions = [];

    // --- Join Room ---
    function joinRoom(room) {
      // Update button states
      document.querySelectorAll('.room-btn').forEach(btn => btn.classList.remove('active'));
      event.target.classList.add('active');

      currentRoom = room;
      socket.emit("joinRoom", room);
      
      // Clear messages and questions
      document.getElementById("messages").innerHTML = "";
      document.getElementById("questions").innerHTML = "";
      document.getElementById("modalQuestions").innerHTML = '<div class="no-questions">No questions yet. Be the first to ask!</div>';
      allQuestions = [];
      
      // Enable input fields
      document.getElementById("input").disabled = false;
      document.getElementById("questionInput").disabled = false;
      document.getElementById("searchInput").disabled = false;
      document.getElementById("modalSearchInput").disabled = false;
      document.querySelector("#form button").disabled = false;
      document.getElementById("askBtn").disabled = false;
      document.getElementById("qaPageBtn").disabled = false;
      
      // Show search input
      document.getElementById("searchInput").style.display = "block";
      
      // Update placeholders based on room
      const roomNames = {
        'pregnancy': 'Pregnancy Support',
        'periods': 'Menstrual Health',
        'breast-health': 'Breast Health',
        'postpartum': 'Postpartum Care',
        'general': 'General Health'
      };
      
      const roomName = roomNames[room] || room;
      document.getElementById("input").placeholder = `Share your thoughts in ${roomName}...`;
    }

    // --- Chat form ---
    const form = document.getElementById("form");
    const input = document.getElementById("input");
    form.addEventListener("submit", (e) => {
      e.preventDefault();
      if (input.value.trim() && currentRoom) {
        socket.emit("chat message", { room: currentRoom, msg: input.value });
        displayMessage(input.value, "self");
        input.value = "";
      }
    });

    // --- Display Message ---
    function displayMessage(message, type) {
      const messages = document.getElementById("messages");
      const wrapper = document.createElement("div");
      wrapper.className = `message-wrapper ${type}`;
      
      const p = document.createElement("p");
      p.textContent = message;
      
      wrapper.appendChild(p);
      messages.appendChild(wrapper);
      messages.scrollTop = messages.scrollHeight;
    }

    // --- Handle previous messages ---
    socket.on("previousMessages", (messages) => {
      const messagesContainer = document.getElementById("messages");
      messagesContainer.innerHTML = "";
      messages.forEach(msgData => {
        const type = msgData.sender === "System" ? "system" : "other";
        displayMessage(msgData.msg, type);
      });
    });

    // --- Handle previous questions ---
    socket.on("previousQuestions", (questions) => {
      allQuestions = questions;
      displayQuestions(questions);
      displayModalQuestions(questions);
    });

    // --- Handle user count ---
    socket.on("userCount", (count) => {
      document.getElementById("onlineCount").textContent = `👥 Online: ${count}`;
    });

    // --- Handle incoming chat messages ---
    socket.on("chat message", (data) => {
      const type = data.sender === "System" ? "system" : "other";
      displayMessage(data.msg, type);
    });

    // --- Ask a Question ---
    function askQuestion() {
      const qInput = document.getElementById("questionInput");
      if (qInput.value.trim() && currentRoom) {
        socket.emit("askQuestion", { room: currentRoom, question: qInput.value });
        qInput.value = "";
      }
    }

    function askModalQuestion() {
      const qInput = document.getElementById("modalQuestionInput");
      if (qInput.value.trim() && currentRoom) {
        socket.emit("askQuestion", { room: currentRoom, question: qInput.value });
        qInput.value = "";
      }
    }

    // Allow Enter key for question inputs
    document.getElementById("questionInput").addEventListener("keypress", (e) => {
      if (e.key === "Enter") askQuestion();
    });
    
    document.getElementById("modalQuestionInput").addEventListener("keypress", (e) => {
      if (e.key === "Enter") askModalQuestion();
    });

    socket.on("newQuestion", (q) => {
      allQuestions.push(q);
      displayQuestions(allQuestions);
      displayModalQuestions(allQuestions);
    });

    // --- Display Questions ---
    function displayQuestions(questions, container = "questions") {
      const questionsList = document.getElementById(container);
      questionsList.innerHTML = "";
      
      if (questions.length === 0) {
        if (container === "modalQuestions") {
          questionsList.innerHTML = '<div class="no-questions">No questions yet. Be the first to ask!</div>';
        }
        return;
      }
      
      questions.slice(-5).forEach(q => createQuestionElement(q, questionsList)); // Show last 5 in sidebar
    }
    
    function displayModalQuestions(questions) {
      const questionsList = document.getElementById("modalQuestions");
      questionsList.innerHTML = "";
      
      if (questions.length === 0) {
        questionsList.innerHTML = '<div class="no-questions">No questions yet. Be the first to ask!</div>';
        return;
      }
      
      questions.forEach(q => createQuestionElement(q, questionsList, true)); // Show all in modal
    }

    function createQuestionElement(q, container, isModal = false) {
      const li = document.createElement("li");
      
      const questionDiv = document.createElement("div");
      questionDiv.className = "question-text";
      questionDiv.textContent = `❓ ${q.text}`;
      
      const answerSection = document.createElement("div");
      answerSection.className = "answer-section";
      
      const answerInput = document.createElement("input");
      answerInput.className = "answer-input";
      answerInput.placeholder = "Share your answer...";
      
      const answerBtn = document.createElement("button");
      answerBtn.className = "answer-btn";
      answerBtn.textContent = "Reply 💬";
      
      const submitAnswer = () => {
        if (answerInput.value.trim()) {
          socket.emit("answerQuestion", { room: currentRoom, qid: q.id, answer: answerInput.value });
          answerInput.value = "";
        }
      };
      
      answerBtn.onclick = submitAnswer;
      answerInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") submitAnswer();
      });

      const answersUl = document.createElement("ul");
      answersUl.className = "answers-list";
      answersUl.id = `answers-${q.id}${isModal ? '-modal' : ''}`;

      // Display existing answers
      q.answers.forEach(answer => {
        const answerLi = document.createElement("li");
        answerLi.textContent = `💡 ${answer}`;
        answersUl.appendChild(answerLi);
      });

      answerSection.appendChild(answerInput);
      answerSection.appendChild(answerBtn);
      
      li.appendChild(questionDiv);
      li.appendChild(answerSection);
      li.appendChild(answersUl);

      container.appendChild(li);
    }

    socket.on("newAnswer", ({ qid, answer }) => {
      // Update the question in allQuestions
      const question = allQuestions.find(q => q.id === qid);
      if (question) {
        question.answers.push(answer);
      }
      
      displayAnswer(qid, answer);
      displayAnswer(qid, answer, true); // Also update modal
    });

    function displayAnswer(qid, answer, isModal = false) {
      const suffix = isModal ? '-modal' : '';
      const answersList = document.getElementById(`answers-${qid}${suffix}`);
      if (answersList) {
        const li = document.createElement("li");
        li.textContent = `💡 ${answer}`;
        answersList.appendChild(li);
      }
    }

    // --- Q&A Page Modal ---
    function openQAPage() {
      document.getElementById("qaModal").style.display = "block";
      document.body.style.overflow = "hidden";
    }
    
    function closeQAPage() {
      document.getElementById("qaModal").style.display = "none";
      document.body.style.overflow = "auto";
    }
    
    // Close modal when clicking outside
    document.getElementById("qaModal").addEventListener("click", (e) => {
      if (e.target.id === "qaModal") {
        closeQAPage();
      }
    });

    // --- Search functionality ---
    document.getElementById("searchInput").addEventListener("input", (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const filteredQuestions = allQuestions.filter(q => 
        q.text.toLowerCase().includes(searchTerm) ||
        q.answers.some(answer => answer.toLowerCase().includes(searchTerm))
      );
      displayQuestions(filteredQuestions);
    });
    
    document.getElementById("modalSearchInput").addEventListener("input", (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const filteredQuestions = allQuestions.filter(q => 
        q.text.toLowerCase().includes(searchTerm) ||
        q.answers.some(answer => answer.toLowerCase().includes(searchTerm))
      );
      displayModalQuestions(filteredQuestions);
    });

    // --- Keyboard shortcuts ---
    document.addEventListener("keydown", (e) => {
      // ESC to close modal
      if (e.key === "Escape" && document.getElementById("qaModal").style.display === "block") {
        closeQAPage();
      }
    });
  </script>
</body>
</html>
